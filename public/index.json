[
{
	"uri": "//localhost:1313/2-create-aws-resources/1-s3-and-cloudfront/",
	"title": "Create S3 Bucket and CloudFront",
	"tags": [],
	"description": "",
	"content": "CONTENT This step includes creating an S3 Bucket and CloudFront distribution to access and use the content.\nCONTENT Create S3 Bucket Upload and View Images/Files/Folders Create CloudFront Create S3 Bucket In the search bar, search for S3 and select it to go to the S3 Bucket service console. Click Create bucket to create a new S3 Bucket. On the create S3 Bucket page, enter the desired Bucket name and select ACLs disabled in the Object Ownership section. Select the ACLs (Access Control List) disabled option to configure the ownership of all files, folders, etc., in the S3 Bucket to this AWS account. All access and modifications to objects within are governed by Policies (IAM Policies and Permissions). This enhances privacy, security, and data safety.\nConfigure the Public Access and Bucket Versioning settings as default. Blocking public access ensures security, interacting only through CloudFront and API (with authentication).\nConfigure Tags, Default encryption, and Advanced settings as default. Click Create bucket. Your S3 Bucket has been created successfully. Upload and View Images/Files/Folders Click the Upload button. Select Add files/Add folder according to the type of object you want to upload and click Upload. Upload successful. You can view the content (for images) or download it using the Open button. You can view/download using the URL at Object URL if you disable the Block Public Access option (at Bucket creation stage).\nCreate CloudFront In the search bar, search for CloudFront and select it to go to the AWS CloudFront service interface. Click Create distribution to create a new Distribution. Select the Origin domain as the domain of the S3 Bucket created above. Choose OAC (Origin Access Control) for the S3 Bucket created. If OAC does not exist, click Create new OAC to create a new one. Follow the steps as shown below. Click Create distribution to initialize. On the next initialization screen, you will see a prompt to add a policy to grant CloudFront access to the content stored in the S3 Bucket. Click Copy policy and return to the S3 Bucket management interface. Select the created S3 Bucket, click the Permissions tab, scroll down to the Bucket policy section, and click Edit. Paste the copied Policy and click Save changes. Return to the details of the newly created CloudFront Distribution (displayed at the Last modified section). Copy the Distribution domain name of the distribution (used to access content on the Origin domain). Access/view/download content in the S3 Bucket by entering the URL + path to the file stored in S3 (add \u0026lsquo;/\u0026rsquo; for subfolders). That completes the first step, creating an S3 Bucket and CloudFront to view/use content in the storage.\n"
},
{
	"uri": "//localhost:1313/1-prerequisites/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "Contents:\nHave an AWS Account Use IAM Account for the Lab (Recommended) Have Postman Installed Have an AWS Account Go to the Amazon Web Service homepage. Select Sign In to the Console at the top right corner. *Note: It might be Create an AWS Account.* Enter your account information and select Continue. *Important: Make sure you enter the correct information, especially the email.* Choose account type. *Note: Both Personal and Professional accounts have the same features.* Enter your company or personal information. Read and agree to the AWS Customer Agreement. Select Create Account and Continue. Use IAM Account for the Lab (Recommended) If you are using an IAM Account, you can skip this step.\nIn the search bar, type IAM and select IAM, then click on Users. If no User exists, select Create user. Enter the information, check the box Provide user access to the AWS Management Console - optional, then click Next. In the Attach policies directly section, search for *AdministratorAccess and select it, then proceed to Next. Review the information and click Create user. Retrieve the account, password, and Console sign-in URL (you may save these) and use them to log in with the IAM User. Create an Access key for the user to log in via CLI. (Select the user to create, go to the Access key section in Security credentials)\nHave Postman Installed "
},
{
	"uri": "//localhost:1313/2-create-aws-resources/2-lambda/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": "Content In this step, you will create a Lambda Function to delete a specified file from an S3 Bucket.\nContent Create IAM Role to Allow Lambda to Interact with the Created S3 Bucket Create Lambda Function Create IAM Role to Allow Lambda to Interact with the Created S3 Bucket Go to IAM Roles and click Create role to create a new Role for Lambda. Select AWS service/Lambda, then click Next. On the Add permissions step, click Next. Name the Role and review the options, then click Create role. Select the created Role, click Add permissions -\u0026gt; Create inline policy to create a custom Policy for the Role. JSON policy:\n{\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Sid\u0026quot;: \u0026quot;S3Interact\u0026quot;,\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;s3:PutObject\u0026quot;,\r\u0026quot;s3:DeleteObject\u0026quot;,\r\u0026quot;s3:DeleteObjectVersion\u0026quot;,\r\u0026quot;s3:ListBucket\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: [\r\u0026quot;arn:aws:s3:::\u0026lt;your_s3_bucket_name\u0026gt;/*\u0026quot;\r]\r},\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: \u0026quot;logs:CreateLogGroup\u0026quot;,\r\u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot;\r},\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;logs:CreateLogStream\u0026quot;,\r\u0026quot;logs:PutLogEvents\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: [\r\u0026quot;arn:aws:logs:*:*:log-group:/aws/lambda/*\u0026quot;\r]\r}\r]\r}\rSelect the JSON tab and paste the policy above, then click Next. Name and review the options, then click Create policy. Create Lambda Function In the search bar, search for Lambda and select it to go to the AWS Lambda service interface, then click Create function. Configure the basic information for the Lambda function (name, programming language, etc.). In the Execution role section, select Use an existing role and choose the IAM Role you created earlier. Then click Create function. This code is intended to delete a specified file in a specific S3 bucket. The variables bucketName and objectKey are retrieved from the path parameters in the URL.\nimport { S3Client, DeleteObjectCommand } from \u0026quot;@aws-sdk/client-s3\u0026quot;;\rexport const handler = async (event) =\u0026gt; {\rconst bucketName = event['pathParameters']['bucket']; const objectKey = event['pathParameters']['key']; const s3 = new S3Client();\rtry {\rconst command = new DeleteObjectCommand({\rBucket: bucketName,\rKey: objectKey\r});\rawait s3.send(command);\rconsole.log(`Successfully deleted ${objectKey} from ${bucketName}`);\rreturn {\rstatusCode: 200,\rbody: JSON.stringify({\rmessage: `Deleted object ${objectKey} successfully`\r})\r};\r} catch (error) {\rconsole.error(`Error deleting object ${objectKey} from ${bucketName}:`, error);\rreturn {\rstatusCode: 500,\rbody: JSON.stringify({\rmessage: `Failed to delete object`,\rerror: error.message\r})\r};\r}\r};\rPaste the above code into the Code section of the Lambda function you created, then click Deploy. You have now completed the step of creating a Lambda function to delete an object in an S3 Bucket.\n"
},
{
	"uri": "//localhost:1313/2-create-aws-resources/",
	"title": "Create Required Resources",
	"tags": [],
	"description": "",
	"content": "In this step, we will initialize the necessary resources.\nFirst, create an S3 Bucket to store images and a CloudFront distribution to access the stored images.\nThe second step is to create a Lambda function with the capability to delete image files in S3 (Serverless).\nIn the third step, we will create an API Gateway to interact with the S3 Bucket through the API and S3 Bucket Integration for uploading images.\nContents S3 Bucket and CloudFront Lambda Function API Gateway Overview Architecture "
},
{
	"uri": "//localhost:1313/2-create-aws-resources/3-api-gateway/",
	"title": "Create API Gateway",
	"tags": [],
	"description": "",
	"content": "Content In this step, we will create an API Gateway. Specifically, one API will use S3 Integration to upload files to an S3 bucket, and another API will trigger the Lambda function created in the previous step to delete a specified file from the S3 bucket.\nCreate Upload API (PUT) In the search bar, search for API Gateway and select it to go to the AWS API Gateway service page. Click Create API, select REST API, and then click Build. Enter a name for the API, leave the other options as default, and click Create API. You will be automatically redirected to the management page of the created API. Select \u0026lsquo;/\u0026rsquo; and then click Create resource. Follow the steps as shown in the images below: Click on \u0026lsquo;/{key}\u0026rsquo; and select Create method. For file upload, select PUT for Method type, choose the appropriate Region, and select AWS Service as Simple Storage Service (S3). Set HTTP Method to PUT. Follow the steps shown in the images. For Execution role, create a Role similar to the IAM Role for Lambda but with AWS Service as API Gateway, and apply the corresponding policies. Then, paste the ARN of the IAM Role into the method. Select API key required under Method request settings and then click Create method. The method is created successfully. Click the Integration request tab and then select Edit. In the URL path parameters section, Add path parameter as shown in the image. Then click Save changes. Name: bucket, Mapped from: method.request.path.bucket (corresponds to parameters in the path). Name: filekey, Mapped from: method.request.path.key (corresponds to parameters in the path). Select API settings in the side panel, then click Manage media types to add binary media types that the API can receive. Add the following Binary media types to interact with image files and save. In the Integration response tab of the PUT method you just created, select Edit. In the Mapping templates section, you can customize the API response. Here, configure the API to return the CloudFront path of the file if the upload is successful. Then save the changes. Return to the page of the PUT method you created, select Deploy API. Choose or create a new Stage and then click Deploy. A Stage is a snapshot for the API, such as api v1, api v2, etc.\rAfter successful deployment, select Stages in the function panel, click on the corresponding API to view the API endpoint. Next, we will create an API Key and Usage plan for the API. **API key** is used for authentication when calling the API to prevent unauthorized access and misuse.\r**Usage plan** is used to limit behaviors like API spam calls and set limits on the number of concurrent requests to the API.\rIn the function panel, select API keys and then click Create API key. Enter a name for the API key and save. Copy the newly created API key. In the Usage plan section, click Create usage plan. Enter the desired configurations. Rate: Number of requests per second. Burst: Number of concurrent requests. Requests: Number of requests users can make in a time period (daily, monthly, etc.). Then click Create usage plan. Return to API keys, select the API key you created, and click Add to usage plan to associate the API with the desired Usage plan. In the Associated stages tab, click Add stage to add the deployed API to the Usage plan. Create Delete API (DELETE) In the Resources section of the function panel, select Create method. Choose Method type as DELETE. Since this API triggers the Lambda function created earlier, configure it as shown below. Then click Create method. The Delete API has been created successfully. Similarly, proceed to deploy the Delete API. Thus, we have created the Upload and Delete APIs. Next, we will proceed to testing.\n"
},
{
	"uri": "//localhost:1313/3-test-api/",
	"title": "Test API with Postman",
	"tags": [],
	"description": "",
	"content": "Contents In this final step, we will test the Upload and Delete APIs we created using Postman.\nTest Upload API (PUT) Select the PUT method, enter the Upload API URL (see the Stages section). In the body, choose the file to upload and then click Send. As we can see, the result will return Forbidden 403 because we haven\u0026rsquo;t added an API key for authentication. Now add the API key in the Authorization tab and click Send again. The result now matches the format we configured in the Integration response section, including the status and CloudFront URL of the uploaded file. Click on the URL to view the image. Go to S3 and you will see the image that was uploaded. Test Delete API (DELETE) Select the DELETE method, enter the Delete API URL (see the Stages section). In the body, choose the file you want to delete and then click Send. The result will return a message indicating that the deletion was successful. Go to S3 and you will see that the file has been deleted. We have completed creating a simple image storage solution.\n"
},
{
	"uri": "//localhost:1313/4-clean-resources/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "Contents After completing the setup, if not in use, we should clean up the resources created in this tutorial to avoid incurring unnecessary charges.\nDelete S3 Bucket First, empty the S3 Bucket you want to delete. You can use the Empty button to clear all files instead of deleting them one by one. Next, choose Delete and confirm the deletion. Delete Lambda Function Delete CloudFront Before deletion, disable the distribution you want to delete. (This process may take a few minutes.) Delete the distribution using the Delete button. Delete API Gateway Delete Stages. Delete API. "
},
{
	"uri": "//localhost:1313/",
	"title": "Simple Serverless Image Storage Using AWS S3",
	"tags": [],
	"description": "",
	"content": "Simple Image Storage with S3 Bucket Overview In this lab, you will use and get acquainted with AWS services such as S3 Bucket, CloudFront, API Gateway, and Lambda to create a simple image storage system. Interact with data in the S3 Bucket through REST API.\nMain Contents Prerequisites Create AWS Resources Test API with Postman Clean Up Resources "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]